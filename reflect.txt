After finishing workshop 4, I’ve learned the relationships between classes in object-oriented applications and how to design and code composition and aggregation. A composition is a has-a relationship between classes, which implements complete ownership, while an association is a service relationship, it does not involve any ownership of one type by another, each type is independent and complete without the related type. Also, with the help of member functions of the string class I now know how to parse a string into tokens based on certain rules. Last but not least, I become more comfortable when creating a class that manages a dynamically allocated array of pointers to objects after practicing in this assignment.

A Reservation object doesn’t exist apart from the Restaurant object, and the Restaurant object is responsible for destroying any reservation object it contains. In Reservation Module, I use substr(), find_first_not_of, find_last_not_of(), find() and stoi() to parse the argument string into name, email, number of people, day and hour in the constructor. Class ConfirmationSender has a data member reservations which is an dynamically allocated array of pointers to reservation objects. To demonstrate the difference between the implementations, let’s take a look on the constructors of both ConfirmationSender and Restaurant. In class Restaurant, we create a new reservation resv = new Reservation[cnt] and then deep copy every element of the array from the parameter. In ConfirmationSender, there’s no instance of reservation will be created since it’s an aggregation relationship. It’s only counting on operator+= and -= to stores the address of reservation and resize the array if necessary. The class only needs to manage the array, but the objects at the addresses stored in it are managed outside this class.
